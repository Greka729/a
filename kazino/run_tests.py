#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
"""

import sys
import os
import unittest

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def run_slot_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    print("üé∞ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã...")
    print("=" * 50)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã
    from tests.test_slot_machine import (
        TestSlotMachine,
        TestSlotWinChecker, 
        TestSlotGameManager,
        TestSlotGameState,
        TestSymbol
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    test_suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    test_classes = [
        TestSlotMachine,
        TestSlotWinChecker,
        TestSlotGameManager,
        TestSlotGameState,
        TestSymbol
    ]
    
    for test_class in test_classes:
        tests = unittest.TestLoader().loadTestsFromTestCase(test_class)
        test_suite.addTests(tests)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    if result.wasSuccessful():
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print(f"–ó–∞–ø—É—â–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
        return True
    else:
        print(f"‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏:")
        print(f"   –ù–µ—É–¥–∞—á: {len(result.failures)}")
        print(f"   –û—à–∏–±–æ–∫: {len(result.errors)}")
        print(f"   –ó–∞–ø—É—â–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
        
        if result.failures:
            print("\n–ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
            for test, traceback in result.failures:
                print(f"  - {test}: {traceback.split('AssertionError: ')[-1].split('\\n')[0]}")
        
        if result.errors:
            print("\n–û—à–∏–±–∫–∏:")
            for test, traceback in result.errors:
                print(f"  - {test}: {traceback.split('\\n')[-2]}")
        
        return False

def run_quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
        from games.slot_machine import SlotMachine, Symbol
        from games.slot_win_checker import SlotWinChecker
        from games.slot_game_manager import SlotGameManager
        from balance import BalanceManager
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —É—Å–ø–µ—à–µ–Ω")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        slot_machine = SlotMachine()
        win_checker = SlotWinChecker()
        balance_manager = BalanceManager()
        game_manager = SlotGameManager(balance_manager)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        result = slot_machine.spin_reels()
        assert len(result) == 3, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —Å–∏–º–≤–æ–ª–∞"
        assert all(isinstance(s, Symbol) for s in result), "–í—Å–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º–∏"
        
        print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∏–≥—Ä—ã—à–∞
        is_win, payout = slot_machine.check_win(result, 10)
        assert isinstance(is_win, bool), "is_win –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—É–ª–µ–≤—ã–º"
        assert isinstance(payout, int), "payout –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º"
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("\nüéâ –í—Å–µ –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±—ã—Å—Ç—Ä–æ–º —Ç–µ—Å—Ç–µ: {e}")
        return False

if __name__ == "__main__":
    print("üé∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã –∫–∞–∑–∏–Ω–æ")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] == "--quick":
        success = run_quick_test()
    else:
        success = run_slot_tests()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    sys.exit(0 if success else 1)
