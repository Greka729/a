"""
–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã
"""

import unittest
import sys
import os
from unittest.mock import Mock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from games.slot_machine import SlotMachine, Symbol, SlotMachineGame
from games.slot_win_checker import SlotWinChecker, WinType
from games.slot_game_manager import SlotGameManager, SlotGameState
from balance import BalanceManager


class TestSlotMachine(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    
    def setUp(self):
        self.slot_machine = SlotMachine()
    
    def test_get_random_symbol(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        symbol = self.slot_machine.get_random_symbol()
        self.assertIsInstance(symbol, Symbol)
        self.assertIn(symbol, Symbol)
    
    def test_spin_reels(self):
        """–¢–µ—Å—Ç –≤—Ä–∞—â–µ–Ω–∏—è –±–∞—Ä–∞–±–∞–Ω–æ–≤"""
        result = self.slot_machine.spin_reels()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç 3 —Å–∏–º–≤–æ–ª–∞
        self.assertEqual(len(result), 3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤–∞–ª–∏–¥–Ω—ã
        for symbol in result:
            self.assertIsInstance(symbol, Symbol)
    
    def test_check_win_three_of_a_kind(self):
        """–¢–µ—Å—Ç –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ —Ç—Ä–µ—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à —Å —Ç—Ä–µ–º—è –≤–∏—à–Ω—è–º–∏
        symbols = [Symbol.CHERRY, Symbol.CHERRY, Symbol.CHERRY]
        is_win, payout = self.slot_machine.check_win(symbols, 10)
        
        self.assertTrue(is_win)
        self.assertEqual(payout, 50)  # 10 * 5 (–º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è 3 –≤–∏—à–µ–Ω)
    
    def test_check_win_two_of_a_kind(self):
        """–¢–µ—Å—Ç –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ –¥–≤—É—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à —Å –¥–≤—É–º—è –≤–∏—à–Ω—è–º–∏
        symbols = [Symbol.CHERRY, Symbol.CHERRY, Symbol.LEMON]
        is_win, payout = self.slot_machine.check_win(symbols, 10)
        
        self.assertTrue(is_win)
        self.assertEqual(payout, 20)  # 10 * 2 (–º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è 2 –≤–∏—à–µ–Ω)
    
    def test_check_win_no_win(self):
        """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
        symbols = [Symbol.CHERRY, Symbol.LEMON, Symbol.ORANGE]
        is_win, payout = self.slot_machine.check_win(symbols, 10)
        
        self.assertFalse(is_win)
        self.assertEqual(payout, 0)
    
    def test_check_win_invalid_input(self):
        """–¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –≤—Ö–æ–¥–æ–º"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤
        symbols = [Symbol.CHERRY, Symbol.LEMON]
        is_win, payout = self.slot_machine.check_win(symbols, 10)
        
        self.assertFalse(is_win)
        self.assertEqual(payout, 0)


class TestSlotWinChecker(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π"""
    
    def setUp(self):
        self.win_checker = SlotWinChecker()
    
    def test_check_line_win_horizontal(self):
        """–¢–µ—Å—Ç –≤—ã–∏–≥—Ä—ã—à–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏"""
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 3x3 —Å –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π
        reels = [
            [Symbol.CHERRY, Symbol.LEMON, Symbol.ORANGE],
            [Symbol.CHERRY, Symbol.LEMON, Symbol.ORANGE],
            [Symbol.CHERRY, Symbol.LEMON, Symbol.ORANGE]
        ]
        
        wins = self.win_checker.check_all_wins(reels, 10)
        
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–∏–≥—Ä—ã—à–∏ –ø–æ –≤—Å–µ–º —Ç—Ä–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º –ª–∏–Ω–∏—è–º
        self.assertGreater(len(wins), 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à —Å –≤–∏—à–Ω—è–º–∏
        cherry_wins = [w for w in wins if w['symbol'] == Symbol.CHERRY]
        self.assertGreater(len(cherry_wins), 0)
    
    def test_check_scatter_win(self):
        """–¢–µ—Å—Ç –≤—ã–∏–≥—Ä—ã—à–∞ —Ä–∞–∑–±—Ä–æ—Å–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É —Å —Ç—Ä–µ–º—è —Å–µ–º–µ—Ä–∫–∞–º–∏
        reels = [
            [Symbol.SEVEN, Symbol.LEMON, Symbol.ORANGE],
            [Symbol.CHERRY, Symbol.SEVEN, Symbol.ORANGE],
            [Symbol.CHERRY, Symbol.LEMON, Symbol.SEVEN]
        ]
        
        wins = self.win_checker.check_all_wins(reels, 10)
        
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∏–≥—Ä—ã—à —Ä–∞–∑–±—Ä–æ—Å–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        scatter_wins = [w for w in wins if w['type'] == 'scatter_win']
        self.assertGreater(len(scatter_wins), 0)
    
    def test_check_wild_win(self):
        """–¢–µ—Å—Ç –≤—ã–∏–≥—Ä—ã—à–∞ —Å –¥–∏–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É —Å –¥–≤—É–º—è –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞–º–∏
        reels = [
            [Symbol.DIAMOND, Symbol.LEMON, Symbol.ORANGE],
            [Symbol.CHERRY, Symbol.DIAMOND, Symbol.ORANGE],
            [Symbol.CHERRY, Symbol.LEMON, Symbol.ORANGE]
        ]
        
        wins = self.win_checker.check_all_wins(reels, 10)
        
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∏–≥—Ä—ã—à —Å –¥–∏–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        wild_wins = [w for w in wins if w['type'] == 'wild_win']
        self.assertGreater(len(wild_wins), 0)
    
    def test_get_total_payout(self):
        """–¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞"""
        wins = [
            {'payout': 50},
            {'payout': 25},
            {'payout': 10}
        ]
        
        total = self.win_checker.get_total_payout(wins)
        self.assertEqual(total, 85)


class TestSlotGameManager(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–≥—Ä—ã"""
    
    def setUp(self):
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è BalanceManager
        self.balance_manager = Mock(spec=BalanceManager)
        self.balance_manager.get_balance.return_value = 1000
        self.balance_manager.can_place_bet.return_value = True
        self.balance_manager.apply_bet_result.return_value = 990
        self.balance_manager.deposit.return_value = None
        
        self.game_manager = SlotGameManager(self.balance_manager)
    
    def test_set_bet_valid(self):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç–∞–≤–∫–∏"""
        result = self.game_manager.set_bet(50)
        self.assertTrue(result)
        self.assertEqual(self.game_manager.current_bet, 50)
    
    def test_set_bet_invalid(self):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç–∞–≤–∫–∏"""
        self.balance_manager.can_place_bet.return_value = False
        
        result = self.game_manager.set_bet(50)
        self.assertFalse(result)
    
    def test_spin_success(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è"""
        result, wins, payout = self.game_manager.spin()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω
        self.assertIsInstance(result, list)
        self.assertEqual(len(result), 3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤–∞–ª–∏–¥–Ω—ã
        for symbol in result:
            self.assertIsInstance(symbol, Symbol)
    
    def test_can_spin(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ä–∞—â–µ–Ω–∏—è"""
        self.assertTrue(self.game_manager.can_spin())
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –±–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞
        self.balance_manager.can_place_bet.return_value = False
        self.assertFalse(self.game_manager.can_spin())
    
    def test_get_stats(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.game_manager.get_stats()
        
        self.assertIn('balance', stats)
        self.assertIn('current_bet', stats)
        self.assertIn('total_spins', stats)
        self.assertIn('win_rate', stats)
    
    def test_get_available_bets(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫"""
        bets = self.game_manager.get_available_bets()
        
        self.assertIsInstance(bets, list)
        self.assertGreater(len(bets), 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
        for bet in bets:
            self.assertGreater(bet, 0)


class TestSlotGameState(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã"""
    
    def setUp(self):
        self.game_state = SlotGameState()
    
    def test_to_dict(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        data = self.game_state.to_dict()
        
        self.assertIn('total_spins', data)
        self.assertIn('total_wins', data)
        self.assertIn('symbol_stats', data)
        self.assertIn('win_line_stats', data)
    
    def test_from_dict(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        data = {
            'total_spins': 10,
            'total_wins': 3,
            'total_bet': 100,
            'total_payout': 150,
            'biggest_win': 50,
            'current_streak': 2,
            'longest_streak': 5,
            'last_win_time': None,
            'games_played': 10,
            'symbol_stats': {'üçí': 5, 'üçã': 3, 'üçä': 2},
            'win_line_stats': {'horizontal': 2, 'diagonal_left': 1}
        }
        
        state = SlotGameState.from_dict(data)
        
        self.assertEqual(state.total_spins, 10)
        self.assertEqual(state.total_wins, 3)
        self.assertEqual(state.biggest_win, 50)
        self.assertEqual(state.current_streak, 2)
        self.assertEqual(state.longest_streak, 5)


class TestSymbol(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤"""
    
    def test_symbol_values(self):
        """–¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π —Å–∏–º–≤–æ–ª–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–º–µ—é—Ç —ç–º–æ–¥–∑–∏
        for symbol in Symbol:
            self.assertIsInstance(symbol.value, str)
            self.assertGreater(len(symbol.value), 0)
    
    def test_symbol_enum(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã
        symbols = list(Symbol)
        self.assertEqual(len(symbols), len(set(symbols)))


if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    test_suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    test_classes = [
        TestSlotMachine,
        TestSlotWinChecker,
        TestSlotGameManager,
        TestSlotGameState,
        TestSymbol
    ]
    
    for test_class in test_classes:
        tests = unittest.TestLoader().loadTestsFromTestCase(test_class)
        test_suite.addTests(tests)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result.wasSuccessful():
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏: {len(result.failures)} –Ω–µ—É–¥–∞—á, {len(result.errors)} –æ—à–∏–±–æ–∫")
